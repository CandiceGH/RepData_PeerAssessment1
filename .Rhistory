}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The following function calculates the mean of the special "vector" created with the above function. However,
# it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and
# skips the computation. Otherwise, it calculates the mean of the data and sets the value of the mean in the
# cache via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vc <- makeVector(c(1,2,3))
cachemean(vc)
cachemean(vc)
vc$set(c(3,4,5))  # Now change the underlying vector
cachemean(vc)     # Notice that it has re-calculated the mean
cachemean(vc)     # It now returns the new cached value instead of re-calculating it.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setCache <- function(set) m <<- set
getCache <- function(get) m
list(set = set, get = get,
setCache = setCache,
getCache = getCache)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
m <- x$getCache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$getCache()
m <- solve(data, ...)
x$setCache(m)
m
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setCache <- function(set) m <<- set
getCache <- function(get) m
list(set = set, get = get,
setCache = setCache,
getCache = getCache)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
m <- x$getCache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$getCache()
m <- solve(data, ...)
x$setCache(m)
m
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
a <- makeCacheMatrix(c(1,2,3,4))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setCache <- function(set) m <<- set
getCache <- function(get) x
list(set = set, get = get,
setCache = setCache,
getCache = getCache)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
m <- x$getCache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$getCache()
m <- solve(data, ...)
x$setCache(m)
m
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
a <- makeCacheMatrix(c(1,2,3,4))
cacheSolve(a)
a <- makeCacheMatrix(c(1,2,3,4))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setCache <- function(set) m <<- set
getCache <- function(get) x
list(set = set, get = get,
setCache = setCache,
getCache = getCache)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
m <- x$getCache()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$getCache()
m <- solve(data, ...)
x$setCache(m)
m
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
a <- makeCacheMatrix(c(1,2,3,4))
cacheSolve(a)
a$set()
a$get()
a$getCache()
a$set()
a$set(c(1,2,3,4))
a$setCache()
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL
set <- function(y) {
x <<- y
xinv <<- NULL
}
get <- function() x
getInv <- function(get) xinv
list(set = set, get = get,
getInv = getInv)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
xinv <- x$getInv()
if(!is.null(xinv)) {
message("getting cached data")
return(xinv)
}
data <- x$get()
xinv <- solve(data, ...)
#        x$set(xinv)
xinv
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
a <- makeCacheMatrix(c(1,2,3,4))
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4,2,2)
)
cacheSolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
xinv <<- NULL
set <- function(y) {
x <<- y
xinv <<- NULL
}
get <- function() x
getInv <- function(get) xinv
list(set = set, get = get,
getInv = getInv)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
xinv <<- x$getInv()
if(!is.null(xinv)) {
message("getting cached data")
return(xinv)
}
data <- x$get()
xinv <<- solve(data, ...)
#        x$set(xinv)
xinv
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
a <- makeCacheMatrix(matrix(1:4,2,2)
makeCacheMatrix <- function(x = matrix()) {
xinv <<- NULL
set <- function(y) {
x <<- y
xinv <<- NULL
}
get <- function() x
getInv <- function(get) xinv
list(set = set, get = get,
getInv = getInv)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then the cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
xinv <<- x$getInv()
if(!is.null(xinv)) {
message("getting cached data")
return(xinv)
}
data <- x$get()
xinv <<- solve(data, ...)
#        x$set(xinv)
xinv
## Return a matrix that is the inverse of 'x'
# Solve(z) ... zz%*%a
}
a <- makeCacheMatrix(matrix(1:4,2,2)
)
cacheSolve(a)
cacheSolve(a)
a$set(4:8,2,2)
a$set(matrix(4:8,2,2))
cacheSolve(a)
cacheSolve(a)
set.seed(1)
rpois
rpois(5,2)
set.seed(10)
x<-rep(0:1), each=5)
x<-rep(0:1, each=5)
e <-rnorm(10,0,20)
y<-0.5+2*x+e
plot(x,y)
rpois
load("~/Coursera/2_Data_Analysis/Assignments/assignment_2/data/Working/samsungData.rda")
View(samsungData)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL", type="source")
library(RMySQL)
con &lt;- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
ucscDb <-dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <-dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
View(result)
ucscDb <-dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <-dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <-dbListTables(hg19)
length(allTables)
allTables[1:5]
adListFields(hg19,"affyU133Plus2")
bdListFields(hg19,"affyU133Plus2")
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <-dbReadTable(hg,"affyU133Plus2")
head(affyData)
affyData <-dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query <- dbSendQuery (hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <-fetch(query); quantile(affyMis$misMatches)
affyMisSmall <-fetch(query,n=10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19) # == should get TRUE
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "93d4f7b377267409b832",
secret = "cbfdd658c680cb0fc1069c5f8569cff5689c38d5")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "93d4f7b377267409b832",
secret = "cbfdd658c680cb0fc1069c5f8569cff5689c38d5")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
setwd("~/Coursera/DataProject5_1/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
data$date <- as.Date(data$date)
library(dplyr)
tsteps <- data %>% group_by(date) %>% summarise(totalsteps = sum(steps))
stepsInterval <- aggregate(steps ~ interval, data = data, mean, na.rm = TRUE)
test <- aggregate(data$steps, list(int=data$interval), mean, na.rm = T)
ans <- test-stepsInterval
View(ans)
View(ans)
View(ans)
View(ans)
View(ans)
rm ans
del ans
rm(ans)
rm(test)
maxSteps <-stepsInterval[which.max(stepsInterval$steps), ]$interval
View(data)
isna<-is.na(data)
newdata<-data
stepsInterval$steps[match(data$interval[which(isna)],data$interval)]
newdata$steps[which(isna)]<-stepsInterval$steps[match(data$interval[which(isna)],data$interval)]
View(newdata)
View(stepsInterval)
View(newdata)
newtsteps <- newdata %>% group_by(date) %>% summarise(totalsteps = sum(steps))
View(newtsteps)
View(tsteps)
View(newtsteps)
hist(newtsteps$totalsteps, main="Histogram of the total number of steps taken each day (with interpolated missing data", xlab="Steps/Day", col="blue")
hist(newtsteps$totalsteps, main="Histogram of the total number of steps taken each day/n (with interpolated missing data", xlab="Steps/Day", col="blue")
hist(newtsteps$totalsteps, main="Histogram of the total number of steps taken each day\n (with interpolated missing data", xlab="Steps/Day", col="blue")
hist(newtsteps$totalsteps, main="Histogram of the total number of steps taken each day\n (including interpolated missing data)", xlab="Steps/Day", col="blue")
hist(newtsteps$totalsteps, main="Histogram of the total number of steps taken each day\n (including interpolations of missing data)", xlab="Steps/Day", col="blue")
hist(tsteps$totalsteps, main="Histogram of the total number of steps taken each day", xlab="Steps/Day", col="red")
Newmeansteps <-mean(newtsteps$totalsteps)
Newmediansteps <-median(newtsteps$totalsteps)
meansteps <-mean(tsteps$totalsteps, na.rm=T)
meansteps <- format(round(meansteps, digits = 2), nsmall = 2)
mediansteps <-median(tsteps$totalsteps, na.rm=T)
View(stepsInterval)
View(newtsteps)
View(stepsInterval)
View(newdata)
hist(newtsteps$totalsteps, main="Histogram of the total number of steps taken each day\n (including interpolations of missing data)")
meansteps <-mean(tsteps$totalsteps)#, na.rm=T)
mediansteps <-median(tsteps$totalsteps)#, na.rm=T)
meansteps <-mean(tsteps$totalsteps, na.rm=T)
mediansteps <-median(tsteps$totalsteps, na.rm=T)
mediansteps <- format(round(mediansteps, digits = 2), nsmall = 2)
mediansteps <-median(tsteps$totalsteps, na.rm=T)
Newmeansteps <-mean(newtsteps$totalsteps)
Newmediansteps <-median(newtsteps$totalsteps)
Newmeansteps <- format(round(Newmeansteps, digits = 2), nsmall = 2)
Newmediansteps <- format(round(Newmediansteps, digits = 2), nsmall = 2)
Newmeansteps <-mean(newtsteps$totalsteps)
Newmeansteps <-mean(newtsteps$totalsteps)
Newmeansteps <- format(round(Newmeansteps, digits = 2), nsmall = 2)
Newmediansteps <-median(newtsteps$totalsteps)
Newmediansteps <- format(round(Newmediansteps, digits = 2), nsmall = 2)
diff <- Newmediansteps-mediansteps
Newmeansteps <-mean(newtsteps$totalsteps)
Newmeansteps <- as.numeric(format(round(Newmeansteps, digits = 2), nsmall = 2))
Newmediansteps <-median(newtsteps$totalsteps)
Newmediansteps <- as.numeric(format(round(Newmediansteps, digits = 2), nsmall = 2))
diff <- Newmediansteps-mediansteps
diff <- as.numeric(format(round(Newmediansteps-mediansteps,digits = 2), nsmall = 2))
Newmeansteps <-as.numeric(format(round(mean(newtsteps$totalsteps), digits = 2), nsmall = 2))
Newmediansteps <-as.numeric(format(round(median(newtsteps$totalsteps), digits = 2), nsmall = 2))
diff<-Newmediansteps-mediansteps
meansteps <-format(round(mean(tsteps$totalsteps, na.rm=T), digits = 2), nsmall = 2)
meansteps <-as.numeric(format(round(mean(tsteps$totalsteps, na.rm=T), digits = 2), nsmall = 2))
mediansteps <-median(tsteps$totalsteps, na.rm=T)
mediansteps <-as.numeric(format(round(median(tsteps$totalsteps, na.rm=T), digits = 2), nsmall = 2))
Newmeansteps <-as.numeric(format(round(mean(newtsteps$totalsteps), digits = 2), nsmall = 2))
Newmediansteps <-as.numeric(format(round(median(newtsteps$totalsteps), digits = 2), nsmall = 2))
diff <- as.numeric(format(round(Newmediansteps-mediansteps,digits = 2), nsmall = 2))
test <- newdata %>% mutate(day = as.factor(ifelse(weekday(date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
)
test<-newdata
View(test)
test <- mutate(test, day = weekdays(test$date))
test$day2 <- as.factor(ifelse(weekday(test$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
test$day2 <- as.factor(ifelse(weekdays(test$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
test<-newdata
test <- mutate(test, day = weekdays(test$date))
str(test)
View(test)
test$day <- as.Date(test$day)
test <- mutate(test, day = weekdays(as.Date(test$date))
)
str(test)
test$day2 <- as.factor(ifelse(weekdays(test$day) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
test<-newdata
test <- mutate(test, day = weekdays(as.Date(test$date)))
test$day = factor(test$day, levels = c("weekday", "weekend"))
View(test)
test<-newdata
test <- mutate(test, day = weekdays(as.Date(test$date)))
test <- mutate(test, day2 = weekdays(as.Date(test$date)))
View(test)
test$day2<-gsub("Monday"| "Tuesday" | "Wednesday" | "Thursday" | "Friday", "Weekday",test$day2)
str(test)
test <- mutate(test, day = as.character(weekdays(as.Date(test$date))))
test <- mutate(test, day = as.character(weekdays(as.Date(test$date))))
str(test)
test$day<-gsub("Monday", "Weekday",test$day)
test <- mutate(test, day = as.character(weekdays(as.Date(test$date))))
test <- mutate(test, day2 = weekdays(as.Date(test$date)))
test$day<-gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "Weekday",test$day)
test<-newdata
test <- mutate(test, day = as.character(weekdays(as.Date(test$date))))
test$day<-gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "Weekday",test$day)
test$day<-gsub("Saturday|Sunday", "Weekend",test$day)
View(test)
test <- mutate(test, day = as.character(weekdays(as.Date(test$date))))
test$day<-as.factor(gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "Weekday",test$day))
test$day<-as.factor(gsub("Saturday|Sunday", "Weekend",test$day))
str(test)
newdata <- mutate(newdata, day = as.character(weekdays(as.Date(newdata$date))))
newdata$day<-as.factor(gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "Weekday",newdata$day))
newdata$day<-as.factor(gsub("Saturday|Sunday", "Weekend",newdata$day))
View(newdata)
plot(newdata$interval, newdata$steps, type = "l")
plot(newdata$interval, newdata$steps, type = "l", xlab = "Interval", ylab = "Number of Steps")
plot.factor(newdata$interval, newdata$steps, type = "l", xlab = "Interval", ylab = "Number of Steps")
View(newdata)
library(ggplot2)
library(grid)
ggplot(newdata, aes(interval, steps))
ggplot(newdata, aes(interval, steps)) +
geom_point(aes(colour = factor(day)), size = 4)
ggplot(newdata, aes(interval, steps)) +
geom_point(aes(colour = factor(day)), size = 4) +
facet_grid(. ~ type) +
geom_smooth(size = 1, color = "black", linetype = 1, method = "lm",
se = FALSE)
ggplot(newdata, aes(interval, steps)) +
geom_point(aes(colour = factor(day)), size = 4) +
facet_grid(. ~ day) +
geom_smooth(size = 1, color = "black", linetype = 1, method = "lm",
se = FALSE)
ggplot(newdata, aes(interval, steps)) +
geom_smooth(aes(colour = factor(day)), size = 4) +
facet_grid(day . ~ )
ggplot(newdata, aes(interval, steps)) + facet_grid(day . ~)
ggplot(data = newdata, aes(interval, steps)) + facet_grid(day . ~)
ggplot(data = newdata, aes(interval, steps)) +
facet_grid(. ~ day)
ggplot(data = newdata, aes(interval, steps)) +
geom_smooth(aes(colour = factor(day)), size = 1) +
facet_grid(. ~ day)
ggplot(data = newdata, aes(interval, steps)) +
geom_smooth(aes(colour = factor(day)), size = 1) +
facet_grid(.~day)
ggplot(data = newdata, aes(interval, steps)) +
geom_smooth(aes(colour = factor(day)), size = 1) +
facet_grid(day~.)
ggplot(data = newdata, aes(interval, steps)) +
geom_line(aes(colour = factor(day)), size = 1) +
facet_grid(day~.)
ggplot(data = newdata, aes(interval, steps)) +
geom_point(aes(colour = factor(day)), size = 1) +
facet_grid(day~.)
ggplot(data = newdata, aes(interval, steps)) +
geom_smooth(aes(colour = factor(day)), size = 1) +
facet_grid(day~.)
library(lattice)
library(lattice)
xyplot(interval ~ steps | day, data = newdata)
xyplot(interval ~ steps | day, data = newdata, type = "l")
xyplot(day | interval ~ steps, data = newdata, type = "l")
xyplot(interval ~ steps | .~day, data = newdata, type = "l")
xyplot(interval ~ steps | day, data = newdata, type = "l")
xyplot(interval ~ steps | day, data = newdata, type = "l", layout=c(1,2))
xyplot(steps ~ interval | day, data = newdata, type = "l", layout=c(1,2))
xyplot(steps ~ interval | day, data = newdata, type = "l", layout=c(1,2),  xlab = "Interval", ylab = "Number of steps", main = "Average steps by day")
stepsInterval2 <- aggregate(steps ~ interval, data = newdata, mean)
View(stepsInterval2)
stepsInterval2 <- aggregate(steps ~ interval + day, data = newdata, mean)
View(stepsInterval2)
stepsInterval2 <- aggregate(steps ~ interval + day, data = newdata, mean)
xyplot(steps ~ interval | day, data = stepsInterval2, type = "l", layout=c(1,2),  xlab = "Interval", ylab = "Number of steps", main = "Average steps by day")
